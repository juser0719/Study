{"remainingRequest":"/Users/jeon-ungjae/Desktop/woong/Coding/Study/FE/Vue_FE/Vue_project/happyhouse/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jeon-ungjae/Desktop/woong/Coding/Study/FE/Vue_FE/Vue_project/happyhouse/src/components/house/HouseList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jeon-ungjae/Desktop/woong/Coding/Study/FE/Vue_FE/Vue_project/happyhouse/src/components/house/HouseList.vue","mtime":1637714932711},{"path":"/Users/jeon-ungjae/Desktop/woong/Coding/Study/FE/Vue_FE/Vue_project/happyhouse/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jeon-ungjae/Desktop/woong/Coding/Study/FE/Vue_FE/Vue_project/happyhouse/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/jeon-ungjae/Desktop/woong/Coding/Study/FE/Vue_FE/Vue_project/happyhouse/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jeon-ungjae/Desktop/woong/Coding/Study/FE/Vue_FE/Vue_project/happyhouse/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KDQppbXBvcnQgSG91c2VMaXN0Um93IGZyb20gIkAvY29tcG9uZW50cy9ob3VzZS9Ib3VzZUxpc3RSb3cudnVlIjsNCmltcG9ydCB7IG1hcFN0YXRlLCBtYXBHZXR0ZXJzIH0gZnJvbSAidnVleCI7DQoNCmNvbnN0IGhvdXNlU3RvcmUgPSAiaG91c2VTdG9yZSI7DQpleHBvcnQgZGVmYXVsdCB7DQogIG5hbWU6ICJIb3VzZUxpc3QiLA0KICBjb21wb25lbnRzOiB7DQogICAgSG91c2VMaXN0Um93LA0KICB9LA0KICBkYXRhKCkgew0KICAgIHJldHVybiB7DQogICAgICBtYXA6IG51bGwsDQogICAgICBtYXJrZXJzOiBbXSwNCiAgICB9Ow0KICB9LA0KICBjb21wdXRlZDogew0KICAgIC4uLm1hcEdldHRlcnMoaG91c2VTdG9yZSwgWyJob3VzZUluZm8iXSksDQogICAgLi4ubWFwU3RhdGUoaG91c2VTdG9yZSwgWyJob3VzZXMiXSksDQogIH0sDQogIHVwZGF0ZWQoKSB7DQogICAgY29uc29sZS5sb2coIm1ha2Ugc3RhcnQiKTsNCiAgICB0aGlzLmRpc3BsYXlNYXJrZXIodGhpcy5ob3VzZUluZm8pOw0KICAgIGNvbnNvbGUubG9nKCJtYWtlIGVuZCIpOw0KICB9LA0KICBtb3VudGVkKCkgew0KICAgIGlmICh3aW5kb3cua2FrYW8gJiYgd2luZG93Lmtha2FvLm1hcHMpIHsNCiAgICAgIHRoaXMuaW5pdE1hcCgpOw0KICAgIH0gZWxzZSB7DQogICAgICBjb25zdCBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzY3JpcHQiKTsNCiAgICAgIC8qIGdsb2JhbCBrYWthbyAqLw0KICAgICAgc2NyaXB0Lm9ubG9hZCA9ICgpID0+IGtha2FvLm1hcHMubG9hZCh0aGlzLmluaXRNYXApOw0KICAgICAgc2NyaXB0LnNyYyA9DQogICAgICAgICIvL2RhcGkua2FrYW8uY29tL3YyL21hcHMvc2RrLmpzP2F1dG9sb2FkPWZhbHNlJmFwcGtleT02OTkwZWVkNjVlZjFiNzA4MTg3YmQ2MmNlNGYxYWZlNiI7DQogICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7DQogICAgfQ0KICB9LA0KICBtZXRob2RzOiB7DQogICAgaW5pdE1hcCgpIHsNCiAgICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJtYXAiKTsNCiAgICAgIGNvbnN0IG9wdGlvbnMgPSB7DQogICAgICAgIGNlbnRlcjogbmV3IGtha2FvLm1hcHMuTGF0TG5nKDMzLjQ1MDcwMSwgMTI2LjU3MDY2NyksDQogICAgICAgIGxldmVsOiA1LA0KICAgICAgfTsNCiAgICAgIHRoaXMubWFwID0gbmV3IGtha2FvLm1hcHMuTWFwKGNvbnRhaW5lciwgb3B0aW9ucyk7DQogICAgfSwNCiAgICBkaXNwbGF5TWFya2VyKHBsYWNlcykgew0KICAgICAgLy92YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7DQogICAgICB2YXIgYm91bmRzID0gbmV3IGtha2FvLm1hcHMuTGF0TG5nQm91bmRzKCk7DQoNCiAgICAgIC8vIOyngOuPhOyXkCDtkZzsi5zrkJjqs6Ag7J6I64qUIOuniOy7pOulvCDsoJzqsbDtlanri4jri6QNCiAgICAgIHRoaXMucmVtb3ZlTWFya2VyKCk7DQogICAgICBjb25zb2xlLmxvZygicGxhY2VzIOq4uOydtCA6ICIgKyBwbGFjZXMubGVuZ3RoKTsNCiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGxhY2VzLmxlbmd0aDsgaSsrKSB7DQogICAgICAgIHZhciBwbGFjZVBvc2l0aW9uID0gbmV3IGtha2FvLm1hcHMuTGF0TG5nKHBsYWNlc1tpXS5sYXQsIHBsYWNlc1tpXS5sbmcpOw0KICAgICAgICBjb25zb2xlLmxvZygicGxhY2VzIHBvc2l0aW9ucyA6ICIgKyBwbGFjZVBvc2l0aW9uKTsNCiAgICAgICAgLy8gdmFyIG1hcmtlciA9IHRoaXMuYWRkTWFya2VyKHBsYWNlUG9zaXRpb24sIGkpOw0KICAgICAgICAvLyB2YXIgaXRlbUVsID0gZ2V0TGlzdEl0ZW0oaSwgcGxhY2VzW2ldKTsgLy8g6rKA7IOJIOqysOqzvCDtla3rqqkgRWxlbWVudOulvCDsg53shLHtlanri4jri6QNCg0KICAgICAgICAvLyDqsoDsg4nrkJwg7J6l7IaMIOychOy5mOulvCDquLDspIDsnLzroZwg7KeA64+EIOuylOychOulvCDsnqzshKTsoJXtlZjquLDsnITtlbQNCiAgICAgICAgLy8gTGF0TG5nQm91bmRzIOqwneyytOyXkCDsooztkZzrpbwg7LaU6rCA7ZWp64uI64ukDQogICAgICAgIGJvdW5kcy5leHRlbmQocGxhY2VQb3NpdGlvbik7DQogICAgICAgIHRoaXMuYWRkTWFya2VyKHBsYWNlUG9zaXRpb24sIGkpOw0KICAgICAgICAvLyDrp4jsu6TsmYAg6rKA7IOJ6rKw6rO8IO2VreuqqeyXkCBtb3VzZW92ZXIg7ZaI7J2E65WMDQogICAgICAgIC8vIO2VtOuLuSDsnqXshozsl5Ag7J247Y+s7JyI64+E7Jqw7JeQIOyepeyGjOuqheydhCDtkZzsi5ztlanri4jri6QNCiAgICAgICAgLy8gbW91c2VvdXQg7ZaI7J2EIOuVjOuKlCDsnbjtj6zsnIjrj4TsmrDrpbwg64ur7Iq164uI64ukDQoNCiAgICAgICAgLy8gKGZ1bmN0aW9uIChtYXJrZXIsIHRpdGxlLCBjb2RlLCBwbGFjZSkgew0KICAgICAgICAvLyAgIGtha2FvLm1hcHMuZXZlbnQuYWRkTGlzdGVuZXIobWFya2VyLCAiY2xpY2siLCBmdW5jdGlvbiAoKSB7DQogICAgICAgIC8vICAgICBkaXNwbGF5SW5mb3dpbmRvdyhtYXJrZXIsIHRpdGxlLCBwbGFjZSk7DQogICAgICAgIC8vICAgICBjb25zb2xlLmxvZyh0aXRsZSArICIgIiArIGNvZGUpOw0KICAgICAgICAvLyAgIH0pOw0KDQogICAgICAgIC8vICAga2FrYW8ubWFwcy5ldmVudC5hZGRMaXN0ZW5lcihtYXAsICJjbGljayIsIGZ1bmN0aW9uICgpIHsNCiAgICAgICAgLy8gICAgIGNvbnNvbGUubG9nKGN1c3RvbU92ZXJsYXkpOw0KICAgICAgICAvLyAgICAgY3VzdG9tT3ZlcmxheS5zZXRNYXAobnVsbCk7DQogICAgICAgIC8vICAgfSk7DQoNCiAgICAgICAgLy8gaXRlbUVsLm9ubW91c2VvdmVyID0gZnVuY3Rpb24gKCkgew0KICAgICAgICAvLyAgIGRpc3BsYXlJbmZvd2luZG93KG1hcmtlciwgdGl0bGUpOw0KICAgICAgICAvLyB9Ow0KDQogICAgICAgIC8vIGl0ZW1FbC5vbm1vdXNlb3V0ID0gZnVuY3Rpb24gKCkgew0KICAgICAgICAvLyAgIGN1c3RvbU92ZXJsYXkuc2V0TWFwKG51bGwpOw0KICAgICAgICAvLyB9Ow0KICAgICAgICAvLyB9KShtYXJrZXIsIHBsYWNlc1tpXS5hcHROYW1lLCBwbGFjZXNbaV0uYXB0Q29kZSwgcGxhY2VzW2ldKTsNCg0KICAgICAgICAvLyBmcmFnbWVudC5hcHBlbmRDaGlsZChpdGVtRWwpOw0KICAgICAgfQ0KICAgICAgLy8g66eI7Luk66W8IOyDneyEse2VmOqzoCDsp4Drj4Tsl5Ag7ZGc7Iuc7ZWp64uI64ukDQoNCiAgICAgIC8vIOqygOyDieuQnCDsnqXshowg7JyE7LmY66W8IOq4sOykgOycvOuhnCDsp4Drj4Qg67KU7JyE66W8IOyerOyEpOygle2VqeuLiOuLpA0KICAgICAgdGhpcy5tYXAuc2V0Qm91bmRzKGJvdW5kcyk7DQogICAgfSwNCiAgICBhZGRNYXJrZXIocG9zaXRpb24sIGlkeCkgew0KICAgICAgdmFyIGltYWdlU3JjID0NCiAgICAgICAgICAiaHR0cHM6Ly90MS5kYXVtY2RuLm5ldC9sb2NhbGltZy9sb2NhbGltYWdlcy8wNy9tYXBhcGlkb2MvbWFya2VyX251bWJlcl9ibHVlLnBuZyIsIC8vIOuniOy7pCDsnbTrr7jsp4AgdXJsLCDsiqTtlITrnbzsnbTtirgg7J2066+47KeA66W8IOyUgeuLiOuLpA0KICAgICAgICBpbWFnZVNpemUgPSBuZXcga2FrYW8ubWFwcy5TaXplKDM2LCAzNyksIC8vIOuniOy7pCDsnbTrr7jsp4DsnZgg7YGs6riwDQogICAgICAgIGltZ09wdGlvbnMgPSB7DQogICAgICAgICAgc3ByaXRlU2l6ZTogbmV3IGtha2FvLm1hcHMuU2l6ZSgzNiwgNjkxKSwgLy8g7Iqk7ZSE65287J207Yq4IOydtOuvuOyngOydmCDtgazquLANCiAgICAgICAgICBzcHJpdGVPcmlnaW46IG5ldyBrYWthby5tYXBzLlBvaW50KDAsIGlkeCAqIDQ2ICsgMTApLCAvLyDsiqTtlITrnbzsnbTtirgg7J2066+47KeAIOykkSDsgqzsmqntlaAg7JiB7Jet7J2YIOyijOyDgeuLqCDsooztkZwNCiAgICAgICAgICBvZmZzZXQ6IG5ldyBrYWthby5tYXBzLlBvaW50KDEzLCAzNyksIC8vIOuniOy7pCDsooztkZzsl5Ag7J287LmY7Iuc7YKsIOydtOuvuOyngCDrgrTsl5DshJzsnZgg7KKM7ZGcDQogICAgICAgIH0sDQogICAgICAgIG1hcmtlckltYWdlID0gbmV3IGtha2FvLm1hcHMuTWFya2VySW1hZ2UoDQogICAgICAgICAgaW1hZ2VTcmMsDQogICAgICAgICAgaW1hZ2VTaXplLA0KICAgICAgICAgIGltZ09wdGlvbnMNCiAgICAgICAgKSwNCiAgICAgICAgbWFya2VyID0gbmV3IGtha2FvLm1hcHMuTWFya2VyKHsNCiAgICAgICAgICBwb3NpdGlvbjogcG9zaXRpb24sIC8vIOuniOy7pOydmCDsnITsuZgNCiAgICAgICAgICBpbWFnZTogbWFya2VySW1hZ2UsDQogICAgICAgIH0pOw0KDQogICAgICBtYXJrZXIuc2V0TWFwKHRoaXMubWFwKTsgLy8g7KeA64+EIOychOyXkCDrp4jsu6Trpbwg7ZGc7Lac7ZWp64uI64ukDQogICAgICB0aGlzLm1hcmtlcnMucHVzaChtYXJrZXIpOyAvLyDrsLDsl7Tsl5Ag7IOd7ISx65CcIOuniOy7pOulvCDstpTqsIDtlanri4jri6QNCg0KICAgICAgcmV0dXJuIG1hcmtlcjsNCiAgICB9LA0KICAgIHJlbW92ZU1hcmtlcigpIHsNCiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5tYXJrZXJzLmxlbmd0aDsgaSsrKSB7DQogICAgICAgIHRoaXMubWFya2Vyc1tpXS5zZXRNYXAobnVsbCk7DQogICAgICB9DQogICAgICB0aGlzLm1hcmtlcnMgPSBbXTsNCiAgICB9LA0KICB9LA0KfTsNCg=="},{"version":3,"sources":["HouseList.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAqfile":"HouseList.vue","sourceRoot":"src/components/house","sourcesContent":["<template>\r\n  <div>\r\n    <b-row>\r\n      <b-container id=\"map\" style=\"width: 100%; height: 500px\"></b-container>\r\n    </b-row>\r\n    <b-container v-if=\"houses\" class=\"bv-example-row mt-3\">\r\n      <house-list-row\r\n        v-for=\"(house, index) in houses\"\r\n        :key=\"index\"\r\n        :house=\"house\"\r\n      />\r\n    </b-container>\r\n    <b-container v-else class=\"bv-example-row mt-3\">\r\n      <b-row>\r\n        <b-col><b-alert show>아파트 목록이 없습니다.</b-alert></b-col>\r\n      </b-row>\r\n    </b-container>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport HouseListRow from \"@/components/house/HouseListRow.vue\";\r\nimport { mapState, mapGetters } from \"vuex\";\r\n\r\nconst houseStore = \"houseStore\";\r\nexport default {\r\n  name: \"HouseList\",\r\n  components: {\r\n    HouseListRow,\r\n  },\r\n  data() {\r\n    return {\r\n      map: null,\r\n      markers: [],\r\n    };\r\n  },\r\n  computed: {\r\n    ...mapGetters(houseStore, [\"houseInfo\"]),\r\n    ...mapState(houseStore, [\"houses\"]),\r\n  },\r\n  updated() {\r\n    console.log(\"make start\");\r\n    this.displayMarker(this.houseInfo);\r\n    console.log(\"make end\");\r\n  },\r\n  mounted() {\r\n    if (window.kakao && window.kakao.maps) {\r\n      this.initMap();\r\n    } else {\r\n      const script = document.createElement(\"script\");\r\n      /* global kakao */\r\n      script.onload = () => kakao.maps.load(this.initMap);\r\n      script.src =\r\n        \"//dapi.kakao.com/v2/maps/sdk.js?autoload=false&appkey=6990eed65ef1b708187bd62ce4f1afe6\";\r\n      document.head.appendChild(script);\r\n    }\r\n  },\r\n  methods: {\r\n    initMap() {\r\n      const container = document.getElementById(\"map\");\r\n      const options = {\r\n        center: new kakao.maps.LatLng(33.450701, 126.570667),\r\n        level: 5,\r\n      };\r\n      this.map = new kakao.maps.Map(container, options);\r\n    },\r\n    displayMarker(places) {\r\n      //var fragment = document.createDocumentFragment();\r\n      var bounds = new kakao.maps.LatLngBounds();\r\n\r\n      // 지도에 표시되고 있는 마커를 제거합니다\r\n      this.removeMarker();\r\n      console.log(\"places 길이 : \" + places.length);\r\n      for (var i = 0; i < places.length; i++) {\r\n        var placePosition = new kakao.maps.LatLng(places[i].lat, places[i].lng);\r\n        console.log(\"places positions : \" + placePosition);\r\n        // var marker = this.addMarker(placePosition, i);\r\n        // var itemEl = getListItem(i, places[i]); // 검색 결과 항목 Element를 생성합니다\r\n\r\n        // 검색된 장소 위치를 기준으로 지도 범위를 재설정하기위해\r\n        // LatLngBounds 객체에 좌표를 추가합니다\r\n        bounds.extend(placePosition);\r\n        this.addMarker(placePosition, i);\r\n        // 마커와 검색결과 항목에 mouseover 했을때\r\n        // 해당 장소에 인포윈도우에 장소명을 표시합니다\r\n        // mouseout 했을 때는 인포윈도우를 닫습니다\r\n\r\n        // (function (marker, title, code, place) {\r\n        //   kakao.maps.event.addListener(marker, \"click\", function () {\r\n        //     displayInfowindow(marker, title, place);\r\n        //     console.log(title + \" \" + code);\r\n        //   });\r\n\r\n        //   kakao.maps.event.addListener(map, \"click\", function () {\r\n        //     console.log(customOverlay);\r\n        //     customOverlay.setMap(null);\r\n        //   });\r\n\r\n        // itemEl.onmouseover = function () {\r\n        //   displayInfowindow(marker, title);\r\n        // };\r\n\r\n        // itemEl.onmouseout = function () {\r\n        //   customOverlay.setMap(null);\r\n        // };\r\n        // })(marker, places[i].aptName, places[i].aptCode, places[i]);\r\n\r\n        // fragment.appendChild(itemEl);\r\n      }\r\n      // 마커를 생성하고 지도에 표시합니다\r\n\r\n      // 검색된 장소 위치를 기준으로 지도 범위를 재설정합니다\r\n      this.map.setBounds(bounds);\r\n    },\r\n    addMarker(position, idx) {\r\n      var imageSrc =\r\n          \"https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png\", // 마커 이미지 url, 스프라이트 이미지를 씁니다\r\n        imageSize = new kakao.maps.Size(36, 37), // 마커 이미지의 크기\r\n        imgOptions = {\r\n          spriteSize: new kakao.maps.Size(36, 691), // 스프라이트 이미지의 크기\r\n          spriteOrigin: new kakao.maps.Point(0, idx * 46 + 10), // 스프라이트 이미지 중 사용할 영역의 좌상단 좌표\r\n          offset: new kakao.maps.Point(13, 37), // 마커 좌표에 일치시킬 이미지 내에서의 좌표\r\n        },\r\n        markerImage = new kakao.maps.MarkerImage(\r\n          imageSrc,\r\n          imageSize,\r\n          imgOptions\r\n        ),\r\n        marker = new kakao.maps.Marker({\r\n          position: position, // 마커의 위치\r\n          image: markerImage,\r\n        });\r\n\r\n      marker.setMap(this.map); // 지도 위에 마커를 표출합니다\r\n      this.markers.push(marker); // 배열에 생성된 마커를 추가합니다\r\n\r\n      return marker;\r\n    },\r\n    removeMarker() {\r\n      for (var i = 0; i < this.markers.length; i++) {\r\n        this.markers[i].setMap(null);\r\n      }\r\n      this.markers = [];\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n#map {\r\n  width: 400px;\r\n  height: 400px;\r\n}\r\n\r\n.button-group {\r\n  margin: 10px 0px;\r\n}\r\n\r\nbutton {\r\n  margin: 0 3px;\r\n}\r\n</style>\r\n"]}]}